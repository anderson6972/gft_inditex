/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.gft.api;

import com.inditex.gft.models.Error;
import com.inditex.gft.models.PriceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-03T21:04:22.416430500+01:00[Europe/Madrid]")
@Validated
@Tag(name = "Precios", description = "the Precios API")
public interface PricesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /prices : Consulta de precio para un producto en una fecha determinada
     * Retorna la información del precio aplicable para un producto de una cadena en un rango de fechas, considerando los parámetros:   - Identificador del producto (productId),   - Identificador de la cadena/brand (brandId).   - Fecha de aplicación (applicationDate), 
     *
     * @param productId Identificador del producto. (required)
     * @param brandId Identificador de la cadena/brand (por ejemplo: 1 para ZARA). (required)
     * @param applicationDate Fecha y hora de aplicación en formato &#x60;YYYY-MM-DD HH:MM:SS&#x60; (sin zona horaria). (required)
     * @return Respuesta exitosa con los detalles del precio. (status code 200)
     *         or Parámetros de entrada inválidos. (status code 400)
     *         or No se encontró precio para los parámetros indicados. (status code 404)
     */
    @Operation(
        operationId = "pricesGet",
        summary = "Consulta de precio para un producto en una fecha determinada",
        description = "Retorna la información del precio aplicable para un producto de una cadena en un rango de fechas, considerando los parámetros:   - Identificador del producto (productId),   - Identificador de la cadena/brand (brandId).   - Fecha de aplicación (applicationDate), ",
        tags = { "Precios" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Respuesta exitosa con los detalles del precio.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parámetros de entrada inválidos.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "No se encontró precio para los parámetros indicados.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prices",
        produces = { "application/json" }
    )
    default ResponseEntity<PriceResponse> pricesGet(
        @NotNull @Parameter(name = "productId", description = "Identificador del producto.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = true) Long productId,
        @NotNull @Parameter(name = "brandId", description = "Identificador de la cadena/brand (por ejemplo: 1 para ZARA).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brandId", required = true) Long brandId,
        @NotNull @Parameter(name = "applicationDate", description = "Fecha y hora de aplicación en formato `YYYY-MM-DD HH:MM:SS` (sin zona horaria).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicationDate", required = true) String applicationDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productId\" : 0, \"endDate\" : \"endDate\", \"price\" : 5.962133916683182, \"brandId\" : 6, \"startDate\" : \"startDate\", \"priceList\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
